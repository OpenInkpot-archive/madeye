images {
    image: "background.png" COMP;
    image: "camera_pic.png" COMP;
    image: "button.png" COMP;
    image: "doublebutton.png" COMP;
    image: "dithering_on.png" COMP;
    image: "dithering_off.png" COMP;
    image: "apply-to-all-images.png" COMP;
    image: "apply-to-this-image.png" COMP;
    image: "brightness.png" COMP;
    image: "contrast.png" COMP;
    image: "scale_empty.png" COMP;
    image: "scale_1.png" COMP;
    image: "scale_2.png" COMP;
    image: "scale_3.png" COMP;
    image: "scale_4.png" COMP;
    image: "scale_5.png" COMP;
    image: "scale_6.png" COMP;
    image: "scale_empty_180.png" COMP;
    image: "scale_1_180.png" COMP;
    image: "scale_2_180.png" COMP;
    image: "scale_3_180.png" COMP;
    image: "scale_4_180.png" COMP;
    image: "scale_5_180.png" COMP;
    image: "scale_6_180.png" COMP;
    image: "fullscreen_icon.png" COMP;

// horizontal theme
    image: "h_background.png" COMP;
    image: "h_button.png" COMP;
    image: "h_doublebutton.png" COMP;
    image: "h_brightness.png" COMP;
    image: "h_contrast.png" COMP;
    image: "h_scale_empty.png" COMP;
    image: "h_scale_1.png" COMP;
    image: "h_scale_2.png" COMP;
    image: "h_scale_3.png" COMP;
    image: "h_scale_4.png" COMP;
    image: "h_scale_5.png" COMP;
    image: "h_scale_6.png" COMP;
    image: "h_scale_empty_180.png" COMP;
    image: "h_scale_1_180.png" COMP;
    image: "h_scale_2_180.png" COMP;
    image: "h_scale_3_180.png" COMP;
    image: "h_scale_4_180.png" COMP;
    image: "h_scale_5_180.png" COMP;
    image: "h_scale_6_180.png" COMP;
}

styles {
    style {
        name, "regular";
        base, "font=sans font_size=16 color=#000 align=left";
    }
    style {
        name, "bold";
        base, "font=sans:bold font_size=20 color=#000 align=left";
    }
}

#define V_BUTTON(_name_, _x_, _y_) \
    _BUTTON(_name_, "button.png", _x_, _y_, 68, 77)

#define H_BUTTON(_name_, _x_, _y_) \
    _BUTTON(_name_, "h_button.png", _x_, _y_, 77, 68)

#define V_DBUTTON(_name_, _x_, _y_) \
    _BUTTON(_name_, "doublebutton.png", _x_, _y_, 68, 154)

#define H_DBUTTON(_name_, _x_, _y_) \
    _BUTTON(_name_, "h_doublebutton.png", _x_, _y_, 154, 68)

#define _BUTTON(_name_, _image_, _x_, _y_, _w_, _h_)        \
    part {		\
        name, _name_;		\
        type, IMAGE;		\
        mouse_events, 0;		\
        description {		\
            state, "default" 0.0;		\
            rel1 { relative, 0.0 0.0; offset, _x_ _y_; }		\
            rel2 { relative, 0.0 0.0; offset, (_x_+_w_) (_y_+_h_); }		\
            image { normal, _image_; }		\
        }		\
    }

#define BUTTON_IMAGE(n, b, i) \
    part { \
        name, n; \
        type, IMAGE; \
        mouse_events, 0; \
        description { \
            state, "default" 0.0; \
            rel1 { relative, 0.0 0.0; offset, 0 0; to, b; } \
            rel2 { relative, 1.0 1.0; offset, -1 -1; to, b; } \
            image { normal, i; } \
        } \
    }

#define BUTTON_TOGGLE_IMAGE(n, b, image1, image2) \
    part { \
        name, n; \
        type, IMAGE; \
        mouse_events, 0; \
        description { \
            state, "default" 0.0; \
            rel1 { relative, 0.0 0.0; offset, 0 0; to, b; } \
            rel2 { relative, 1.0 1.0; offset, -1 -1; to, b; } \
            image { normal, image1; } \
        } \
        description { \
            state, "pressed" 0.0; \
            inherit, "default" 0.0; \
            image { normal, image2; } \
        } \
    }

#define BUTTON_PROG(name1, signal_name)           \
            program {                                       \
                name, name1;                                \
                signal, signal_name;                        \
                                                            \
                script {                                    \
                    new name_arg[100], name[100];           \
                    getsarg(0, name_arg, 100);              \
                    strcut(name, name_arg, strlen(signal_name)-1, 100);  \
                                                            \
                    set_state(PART:name1, name, 0.0);       \
                }                                           \
            }

#define STR(x) #x

#define V_SCALE_DEF_STATE(n) \
                description {	\
                    state, "default" 0.0;	\
                    min, 20 48;	\
                    max, 20 48;	\
                    rel1 { relative, 0.0 0.0; offset, 0 15; to, n"-button"; }	\
                    rel2 { relative, 1.0 0.5; offset, -1 -15; to, n"-button"; }	\
                    image { normal, "scale_empty.png"; }	\
                }

#define V_SCALE_DEF_STATE_180(n) \
                description {	\
                    state, "default" 0.0;	\
                    min, 20 48;	\
                    max, 20 48;	\
                    rel1 { relative, 1.0 1.0; offset, -1 -15; to, n"-button"; }	\
                    rel2 { relative, 0.0 0.5; offset, 0 15; to, n"-button"; }	\
                    image { normal, "scale_empty_180.png"; }	\
                }

#define H_SCALE_DEF_STATE(n) \
                description {	\
                    state, "default" 0.0;	\
                    min, 48 20;	\
                    max, 48 20;	\
                    rel1 { relative, 0.0 0.0; offset, 15 0; to, n"-button"; }	\
                    rel2 { relative, 0.5 1.0; offset, -15 -1; to, n"-button"; }	\
                    image { normal, "h_scale_empty.png"; }	\
                }

#define H_SCALE_DEF_STATE_180(n) \
                description {	\
                    state, "default" 0.0;	\
                    min, 48 20;	\
                    max, 48 20;	\
                    rel1 { relative, 1.0 1.0; offset, -15 -1; to, n"-button"; }	\
                    rel2 { relative, 0.5 0.0; offset, 15 0; to, n"-button"; }	\
                    image { normal, "h_scale_empty_180.png"; }	\
                }

#define SCALE_STATE(s, prefix) \
                description {	\
                    state, STR(s) 0.0;	\
                    inherit, "default" 0.0;	\
                    image { normal, prefix"scale_"STR(s)".png"; }	\
                }

#define SCALE_STATE_180(s, prefix) \
                description {	\
                    state, STR(s) 0.0;	\
                    inherit, "default" 0.0;	\
                    image { normal, prefix"scale_"STR(s)"_180.png"; }	\
                }

#define V_SCALE(n) \
    SCALE(n, "", V_SCALE_DEF_STATE(n), V_SCALE_DEF_STATE_180(n))

#define H_SCALE(n) \
    SCALE(n, "h_", H_SCALE_DEF_STATE(n), H_SCALE_DEF_STATE_180(n))

#define SCALE(n, prefix, def_state, def_state_180) \
            part {	\
                name, n"-scale-1";	\
                type, IMAGE;	\
                mouse_events, 0;	\
                def_state \
                SCALE_STATE(1, prefix) \
                SCALE_STATE(2, prefix) \
                SCALE_STATE(3, prefix) \
                SCALE_STATE(4, prefix) \
                SCALE_STATE(5, prefix) \
                SCALE_STATE(6, prefix) \
            }	\
            part {	\
                name, n"-scale-2";	\
                type, IMAGE;	\
                mouse_events, 0;	\
                def_state_180   \
                SCALE_STATE_180(1, prefix) \
                SCALE_STATE_180(2, prefix) \
                SCALE_STATE_180(3, prefix) \
                SCALE_STATE_180(4, prefix) \
                SCALE_STATE_180(5, prefix) \
                SCALE_STATE_180(6, prefix) \
            }	\
            SCALE_PROG(n)

#define SCALE_PROG(n) \
            program {	\
                name, n"-level";	\
                signal, n"-level,*";	\
	\
                script {	\
                    new level_arg[100];	\
                    getsarg(0, level_arg, 100);	\
                    new level_s[100];	\
                    strcut(level_s, level_arg, strlen(n"-level,"), 100);	\
                    new level = atoi(level_s);	\
	\
                    if(level == 0) {	\
                        set_state(PART:n"-scale-1", "default", 0.0);	\
                        set_state(PART:n"-scale-2", "default", 0.0);	\
                    } else {	\
                        if(level > 6)	\
                            level = 6;	\
                        if(level < -6)	\
                            level = -6;	\
	\
                        new l = level;	\
                        if(l < 0)	\
                            l = 0 - l;	\
                        snprintf(level_s, 100, "%d", l);	\
	\
                        if(level > 0) {	\
                            set_state(PART:n"-scale-1", level_s, 0.0);	\
                            set_state(PART:n"-scale-2", "default", 0.0);	\
                        } else {	\
                            set_state(PART:n"-scale-2", level_s, 0.0);	\
                            set_state(PART:n"-scale-1", "default", 0.0);	\
                        }	\
                    }	\
                }	\
            }

#define TEXTFIELD(n, rel, s, y1, y2) \
            part { \
                name, n; \
                type, TEXTBLOCK; \
                mouse_events, 0; \
                clip_to, "text-clipper"; \
                description { \
                    state, "default" 0.0; \
                    color, 0 0 0 255; \
                    text { \
                        style, s; \
                        max, 0 1; \
                    } \
                    align, 0.5 0.5; \
                    rel1 { to, "text-clipper"; relative, 0.0 0.0; offset, 0 y1; } \
                    rel2 { to, "text-clipper"; relative, 1.0 0.0; offset, 0 y2; } \
                } \
            }

collections {
    group {
        name, "fullscreen_icon";
        parts {
            part {
                name, "fs_icon";
                type, IMAGE;
                mouse_events, 0;
                description {
                    state, "default" 0.0;
                    min, 32 32;
                    max, 32 32;
                    rel1 { relative, 0.0 1.0; offset, 9 -40; }
                    rel2 { relative, 0.0 1.0; offset, 39 -10; }
                    image { normal, "fullscreen_icon.png"; }
                }
            }
        }
    }
    group {
        name, "vert_main_edje";
        parts {
            part {
                name, "background_1";
                type, RECT;
                mouse_events, 0;
                description {
                    state, "default" 0.0;
                    color, 255 255 255 255;
                    rel1 { relative, 0.0 0.0; offset, 0 0; }
                    rel2 { relative, 1.0 1.0; offset, -1 -1; }
                }
            }
            part {
                name, "background_2";
                type, IMAGE;
                mouse_events, 0;
                description {
                    state, "default" 0.0;
                    rel1 { relative, 0.0 0.0; offset, 1 1; }
                    rel2 { relative, 1.0 1.0; offset, -2 -2; }
                    fill {
                        origin { relative, 0.0 0.0; }
                        size { relative, 0.0 0.0; offset, 600 14; } }
                    image { normal, "background.png"; }
                }
            }
            part {
                name, "frame1";
                type, RECT;
                mouse_events, 0;
                description {
                    state, "default" 0.0;
                    color, 0 0 0 255;
                    rel1 { relative, 0.0 0.0; offset, 113 11; }
                    rel2 { relative, 1.0 0.0; offset, -24 590; }
                }
            }
            part {
                name, "frame";
                type, RECT;
                mouse_events, 0;
                description {
                    state, "default" 0.0;
                    color, 204 204 204 255;
                    rel1 { relative, 0.0 0.0; offset, 1 1; to, "frame1"; }
                    rel2 { relative, 1.0 1.0; offset, -2 -2; to, "frame1"; }
                }
            }
            part {
                name, "image-frame";
                type, RECT;
                mouse_events, 0;
                description {
                    state, "default" 0.0;
                    color, 204 204 204 255;
                    rel1 { relative, 0.0 0.0; offset, 10 10; to, "frame"; }
                    rel2 { relative, 1.0 1.0; offset, -11 -11; to, "frame"; }
                }
            }
            part {
                name, "camera";
                type, IMAGE;
                mouse_events, 0;
                description {
                    state, "default" 0.0;
                    rel1 { relative, 1.0 1.0; offset, -219 -104; }
                    rel2 { relative, 1.0 1.0; offset, -2 -2; }
                    image { normal, "camera_pic.png"; }
                }
            }

            part {
                name, "text-clipper";
                type, RECT;
                mouse_events, 0;
                description {
                    state, "default" 0.0;
                    rel1 { to, "frame"; relative, 0.0 1.0; offset, 0 5; }
                    rel2 { to, "camera"; relative, 0.0 1.0; offset, -10 -5; }
                }
            }

            TEXTFIELD("filename", "text-clipper", "bold", 0, 22)
            TEXTFIELD("extention", "filename", "regular", 23, 41)
            TEXTFIELD("dimensions", "extention", "regular", 42, 60)
            TEXTFIELD("size", "dimensions", "regular", 61, 79)
            TEXTFIELD("date", "size", "regular", 80, 98)

            V_DBUTTON("brightness-button", 1, 1)
            BUTTON_IMAGE("brightness-image", "brightness-button", "brightness.png")
            V_SCALE("brightness")

            V_DBUTTON("contrast-button", 1, 155)
            BUTTON_IMAGE("contrast-image", "contrast-button", "contrast.png")
            V_SCALE("contrast")

            V_BUTTON("dither-button", 1, 310)
            BUTTON_TOGGLE_IMAGE("dither", "dither-button", "dithering_off.png", "dithering_on.png")
            BUTTON_PROG("dither", "dither,*")

            V_BUTTON("presset-button", 1, 388)
            BUTTON_TOGGLE_IMAGE("presset", "presset-button", "apply-to-this-image.png", "apply-to-all-images.png")
            BUTTON_PROG("presset", "presset,*")
        }
    }
    group {
        name, "hor_main_edje";
        parts {
            part {
                name, "background_1";
                type, RECT;
                mouse_events, 0;
                description {
                    state, "default" 0.0;
                    color, 255 255 255 255;
                    rel1 { relative, 0.0 0.0; offset, 0 0; }
                    rel2 { relative, 1.0 1.0; offset, -1 -1; }
                }
            }
            part {
                name, "background_2";
                type, IMAGE;
                mouse_events, 0;
                description {
                    state, "default" 0.0;
                    rel1 { relative, 0.0 0.0; offset, 1 1; }
                    rel2 { relative, 1.0 1.0; offset, -2 -2; }
                    fill {
                        origin { relative, 0.0 0.0; }
                        size { relative, 0.0 0.0; offset, 14 550; } }
                    image { normal, "h_background.png"; }
                }
            }
            part {
                name, "frame1";
                type, RECT;
                mouse_events, 0;
                description {
                    state, "default" 0.0;
                    color, 0 0 0 255;
                    rel1 { to, "background_2"; relative, 0.0 0.0; offset, 15 15; }
                    rel2 { to, "background_2"; relative, 1.0 0.0; offset, -240 445; }
                }
            }
            part {
                name, "frame";
                type, RECT;
                mouse_events, 0;
                description {
                    state, "default" 0.0;
                    color, 204 204 204 255;
                    rel1 { relative, 0.0 0.0; offset, 1 1; to, "frame1"; }
                    rel2 { relative, 1.0 1.0; offset, -2 -2; to, "frame1"; }
                }
            }
            part {
                name, "image-frame";
                type, RECT;
                mouse_events, 0;
                description {
                    state, "default" 0.0;
                    color, 204 204 204 255;
                    rel1 { relative, 0.0 0.0; offset, 10 10; to, "frame"; }
                    rel2 { relative, 1.0 1.0; offset, -11 -11; to, "frame"; }
                }
            }
            part {
                name, "camera";
                type, IMAGE;
                mouse_events, 0;
                description {
                    state, "default" 0.0;
                    rel1 { to, "background_2"; relative, 1.0 1.0; offset, -219 -195; }
                    rel2 { to, "background_2"; relative, 1.0 1.0; offset, -2 -95; }
                    image { normal, "camera_pic.png"; }
                }
            }

            part {
                name, "text-clipper";
                type, RECT;
                mouse_events, 0;
                description {
                    state, "default" 0.0;
                    rel1 { to, "frame"; relative, 1.0 0.0; offset, 10 5; }
                    rel2 { to, "camera"; relative, 1.0 0.0; offset, -5 -10; }
                }
            }

            TEXTFIELD("filename", "text-clipper", "bold", 0, 22)
            TEXTFIELD("extention", "filename", "regular", 23, 41)
            TEXTFIELD("dimensions", "extention", "regular", 42, 60)
            TEXTFIELD("size", "dimensions", "regular", 61, 79)
            TEXTFIELD("date", "size", "regular", 80, 98)

            #define YPOS 550-68

            H_DBUTTON("brightness-button", 50, YPOS)
            BUTTON_IMAGE("brightness-image", "brightness-button", "h_brightness.png")
            H_SCALE("brightness")

            H_DBUTTON("contrast-button", 205, YPOS)
            BUTTON_IMAGE("contrast-image", "contrast-button", "h_contrast.png")
            H_SCALE("contrast")

            H_BUTTON("dither-button", 362, YPOS)
            BUTTON_TOGGLE_IMAGE("dither", "dither-button", "dithering_off.png", "dithering_on.png")
            BUTTON_PROG("dither", "dither,*")

            H_BUTTON("presset-button", 440, YPOS)
            BUTTON_TOGGLE_IMAGE("presset", "presset-button", "apply-to-this-image.png", "apply-to-all-images.png")
            BUTTON_PROG("presset", "presset,*")

            H_BUTTON("fs-button", 722, YPOS)
            part {
                name, "fs-image";
                type, IMAGE;
                mouse_events, 0;
                description {
                    state, "default" 0.0;
                    min, 32 32;
                    max, 32 32;
                    rel1 { relative, 0.0 0.0; offset, 0 0; to, "fs-button"; }
                    rel2 { relative, 1.0 1.0; offset, -1 -1; to, "fs-button"; }
                    image { normal, "fullscreen_icon.png"; }
                }
            }
        }
    }
}
